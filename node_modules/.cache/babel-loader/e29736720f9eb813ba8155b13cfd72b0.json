{"ast":null,"code":"import { AUTH_REGISTER, AUTH_LOGIN, AUTH_ERROR } from '../constants';\nexport const register = user => dispatch => {\n  return fetch('http://localhost:3000/users/register', {\n    method: 'POST',\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    console.log(response);\n\n    if (response.status < 400) {\n      dispatch({\n        type: AUTH_REGISTER\n      });\n    } else {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: 'Email or Username already in use'\n      });\n    }\n  }).catch(error => {\n    //how to manage server errors?\n    dispatch({\n      type: AUTH_ERROR,\n      payload: 'Email or Username already in use'\n    });\n  });\n};\nexport const login = formData => dispatch => {\n  return fetch('http://localhost:3000/users/login', {\n    method: 'POST',\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formData)\n  }).then(response => {\n    console.log(response);\n    response.status < 400 ? dispatch({\n      type: AUTH_LOGIN\n    }) : dispatch({\n      type: AUTH_ERROR,\n      payload: 'Incorrect username or password'\n    });\n  }).catch(error => {\n    console.log('server error'); // \tdispatch({  \n    // \ttype: AUTH_ERROR,\n    // \tpayload: 'Incorrect username or password'})\n  });\n}; // export const checkAuth = ()","map":{"version":3,"sources":["/Users/LeonVdB/Desktop/slickk/src/actions/auth.js"],"names":["AUTH_REGISTER","AUTH_LOGIN","AUTH_ERROR","register","user","dispatch","fetch","method","mode","credentials","headers","body","JSON","stringify","then","response","console","log","status","type","payload","catch","error","login","formData"],"mappings":"AAAA,SACCA,aADD,EAECC,UAFD,EAGCC,UAHD,QAGmB,cAHnB;AAKA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAWC,QAAD,IAAc;AAC/C,SAAOC,KAAK,CAAC,sCAAD,EAAyC;AACpDC,IAAAA,MAAM,EAAE,MAD4C;AAEpDC,IAAAA,IAAI,EAAE,MAF8C;AAGpDC,IAAAA,WAAW,EAAE,SAHuC;AAIpDC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR,KAJ2C;AAOpDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAP8C,GAAzC,CAAL,CASNU,IATM,CASCC,QAAD,IAAc;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,QAAIA,QAAQ,CAACG,MAAT,GAAkB,GAAtB,EAA2B;AAC1Bb,MAAAA,QAAQ,CAAE;AAACc,QAAAA,IAAI,EAAEnB;AAAP,OAAF,CAAR;AACA,KAFD,MAGK;AACJK,MAAAA,QAAQ,CAAC;AACRc,QAAAA,IAAI,EAAEjB,UADE;AAERkB,QAAAA,OAAO,EAAE;AAFD,OAAD,CAAR;AAGA;AACD,GAnBM,EAoBNC,KApBM,CAoBAC,KAAK,IAAI;AAAE;AACjBjB,IAAAA,QAAQ,CAAC;AACTc,MAAAA,IAAI,EAAEjB,UADG;AAETkB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAR;AAGA,GAxBM,CAAP;AAyBA,CA1BM;AA4BP,OAAO,MAAMG,KAAK,GAAIC,QAAD,IAAenB,QAAD,IAAc;AAChD,SAAOC,KAAK,CAAC,mCAAD,EAAsC;AACjDC,IAAAA,MAAM,EAAE,MADyC;AAEjDC,IAAAA,IAAI,EAAE,MAF2C;AAGjDC,IAAAA,WAAW,EAAE,SAHoC;AAIjDC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR,KAJwC;AAOjDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeW,QAAf;AAP2C,GAAtC,CAAL,CASNV,IATM,CASCC,QAAD,IAAc;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAA,IAAAA,QAAQ,CAACG,MAAT,GAAkB,GAAlB,GACEb,QAAQ,CAAE;AAACc,MAAAA,IAAI,EAAElB;AAAP,KAAF,CADV,GAEEI,QAAQ,CAAE;AAACc,MAAAA,IAAI,EAAEjB,UAAP;AAAmBkB,MAAAA,OAAO,EAAE;AAA5B,KAAF,CAFV;AAGA,GAdM,EAeNC,KAfM,CAeAC,KAAK,IAAI;AACfN,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADe,CAEhB;AACA;AACA;AACC,GApBM,CAAP;AAqBA,CAtBM,C,CAwBP","sourcesContent":["import { \n\tAUTH_REGISTER,  \n\tAUTH_LOGIN,\n\tAUTH_ERROR } from '../constants'\n\nexport const register = (user) => (dispatch) => {\n\treturn fetch('http://localhost:3000/users/register', {\n\t\tmethod: 'POST',\n\t\tmode: 'cors',\n\t\tcredentials: 'include',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(user),\n\t})\n\t.then( (response) => {\n\t\tconsole.log(response);\n\t\tif (response.status < 400) {\n\t\t\tdispatch( {type: AUTH_REGISTER} ); \n\t\t}\n\t\telse {\n\t\t\tdispatch({  \n\t\t\t\ttype: AUTH_ERROR,\n\t\t\t\tpayload: 'Email or Username already in use'})\n\t\t}\n\t})\n\t.catch(error => { //how to manage server errors?\n\t\tdispatch({  \n\t\ttype: AUTH_ERROR,\n\t\tpayload: 'Email or Username already in use'})\n\t})\n}\n\nexport const login = (formData) => (dispatch) => {\n\treturn fetch('http://localhost:3000/users/login', {\n\t\tmethod: 'POST',\n\t\tmode: 'cors',\n\t\tcredentials: 'include',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(formData),\n\t})\n\t.then( (response) => {\n\t\tconsole.log(response);\n\t\tresponse.status < 400 \n\t\t? dispatch( {type: AUTH_LOGIN} )\n\t\t: dispatch( {type: AUTH_ERROR, payload: 'Incorrect username or password'})\n\t})\n\t.catch(error => { \n\t\tconsole.log('server error');\n\t// \tdispatch({  \n\t// \ttype: AUTH_ERROR,\n\t// \tpayload: 'Incorrect username or password'})\n\t})\n}\n\n// export const checkAuth = ()\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}