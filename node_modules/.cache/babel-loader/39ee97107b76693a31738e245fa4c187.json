{"ast":null,"code":"import { REQUEST_POSTS_PENDING, REQUEST_POSTS_SUCCESS, REQUEST_POSTS_FAILED } from '../constants';\nexport const requestPosts = () => dispatch => {\n  dispatch({\n    type: REQUEST_POSTS_PENDING\n  });\n  fetch('http://localhost:3000/products/').then(res => res.json()).then(data => {\n    let products = [];\n    let hairstyles = [];\n\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].post_type === \"product\") {\n        products.push(data[i]);\n      } else {\n        hairstyles.push(data[i]);\n      }\n    }\n\n    dispatch({\n      type: REQUEST_POSTS_SUCCESS,\n      payload: {\n        hairstyles: hairstyles,\n        products: products\n      }\n    });\n  }).catch(error => dispatch({\n    type: REQUEST_POSTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/LeonVdB/Desktop/slickk/src/Actions/index.js"],"names":["REQUEST_POSTS_PENDING","REQUEST_POSTS_SUCCESS","REQUEST_POSTS_FAILED","requestPosts","dispatch","type","fetch","then","res","json","data","products","hairstyles","i","length","post_type","push","payload","catch","error"],"mappings":"AAAA,SACEA,qBADF,EAEEC,qBAFF,EAGEC,oBAHF,QAIO,cAJP;AAMA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAM,EAAAA,KAAK,CAAC,iCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACZ,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACH,IAAI,CAACI,MAArB,EAA6BD,CAAC,EAA9B,EAAmC;AACjC,UAAIH,IAAI,CAACG,CAAD,CAAJ,CAAQE,SAAR,KAAsB,SAA1B,EAAqC;AACnCJ,QAAAA,QAAQ,CAACK,IAAT,CAAcN,IAAI,CAACG,CAAD,CAAlB;AACD,OAFD,MAEO;AACLD,QAAAA,UAAU,CAACI,IAAX,CAAgBN,IAAI,CAACG,CAAD,CAApB;AACD;AACF;;AACDT,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,qBADC;AAEPgB,MAAAA,OAAO,EAAE;AAACL,QAAAA,UAAU,EAAEA,UAAb;AAAyBD,QAAAA,QAAQ,EAAEA;AAAnC;AAFF,KAAD,CAAR;AAID,GAhBH,EAiBGO,KAjBH,CAiBSC,KAAK,IAAIf,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEH,oBAAR;AAA8Be,IAAAA,OAAO,EAAEE;AAAvC,GAAD,CAjB1B;AAkBD,CApBM","sourcesContent":["import {\n  REQUEST_POSTS_PENDING,\n  REQUEST_POSTS_SUCCESS,\n  REQUEST_POSTS_FAILED\n} from '../constants'\n\nexport const requestPosts = () => (dispatch) => {\n  dispatch({ type: REQUEST_POSTS_PENDING })\n  fetch('http://localhost:3000/products/')\n    .then(res => res.json())\n    .then(data => {\n      let products = [];\n      let hairstyles = [];\n      for (let i=0; i<data.length; i++)  {\n        if (data[i].post_type === \"product\") {\n          products.push(data[i]);\n        } else {\n          hairstyles.push(data[i]);\n        }\n      }\n      dispatch({\n        type: REQUEST_POSTS_SUCCESS,\n        payload: {hairstyles: hairstyles, products: products}\n      });\n    })\n    .catch(error => dispatch({ type: REQUEST_POSTS_FAILED, payload: error }))\n}\n"]},"metadata":{},"sourceType":"module"}