{"ast":null,"code":"import { AUTH_REGISTER, AUTH_LOGIN, AUTH_ERROR } from '../constants';\nexport const register = user => dispatch => {\n  console.log(user);\n  return fetch('http://localhost:3000/users/register', {\n    method: 'POST',\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    console.log(response.json());\n\n    if (!response.json().error) {\n      dispatch({\n        type: AUTH_REGISTER\n      });\n    } else {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: 'Email or Username already in use'\n      });\n    }\n  }).catch(error => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: 'Email or Username already in use'\n    });\n  });\n};\nexport const login = formData => dispatch => {\n  fetch('http://localhost:3000/users/register', {\n    method: 'GET',\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(formData)\n  }).then(() => dispatch({\n    type: AUTH_LOGIN\n  })).catch(error => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: 'Incorrect username or password'\n    });\n  });\n}; // export const checkAuth = ()","map":{"version":3,"sources":["/Users/philip/Desktop/slickk-redux/src/actions/auth.js"],"names":["AUTH_REGISTER","AUTH_LOGIN","AUTH_ERROR","register","user","dispatch","console","log","fetch","method","mode","credentials","headers","body","JSON","stringify","then","response","json","error","type","payload","catch","login","formData"],"mappings":"AAAA,SACCA,aADD,EAECC,UAFD,EAGCC,UAHD,QAGmB,cAHnB;AAMA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAWC,QAAD,IAAc;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAOI,KAAK,CAAC,sCAAD,EAAyC;AACpDC,IAAAA,MAAM,EAAE,MAD4C;AAEpDC,IAAAA,IAAI,EAAE,MAF8C;AAGpDC,IAAAA,WAAW,EAAE,SAHuC;AAIpDC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR,KAJ2C;AAOpDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AAP8C,GAAzC,CAAL,CASNY,IATM,CASCC,QAAD,IAAc;AACpBX,IAAAA,OAAO,CAACC,GAAR,CAAYU,QAAQ,CAACC,IAAT,EAAZ;;AACA,QAAI,CAACD,QAAQ,CAACC,IAAT,GAAgBC,KAArB,EAA4B;AAC3Bd,MAAAA,QAAQ,CAAE;AAACe,QAAAA,IAAI,EAAEpB;AAAP,OAAF,CAAR;AACA,KAFD,MAGK;AACJK,MAAAA,QAAQ,CAAC;AACRe,QAAAA,IAAI,EAAElB,UADE;AAERmB,QAAAA,OAAO,EAAE;AAFD,OAAD,CAAR;AAGA;AACD,GAnBM,EAoBNC,KApBM,CAoBAH,KAAK,IAAI;AACfd,IAAAA,QAAQ,CAAC;AACTe,MAAAA,IAAI,EAAElB,UADG;AAETmB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAR;AAGA,GAxBM,CAAP;AAyBA,CA3BM;AA6BP,OAAO,MAAME,KAAK,GAAIC,QAAD,IAAenB,QAAD,IAAc;AAChDG,EAAAA,KAAK,CAAC,sCAAD,EAAyC;AAC7CC,IAAAA,MAAM,EAAE,KADqC;AAE7CC,IAAAA,IAAI,EAAE,MAFuC;AAG7CC,IAAAA,WAAW,EAAE,SAHgC;AAI7CC,IAAAA,OAAO,EAAE;AACR,sBAAgB;AADR,KAJoC;AAO7CC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeS,QAAf;AAPuC,GAAzC,CAAL,CASCR,IATD,CASO,MAAMX,QAAQ,CAAE;AAACe,IAAAA,IAAI,EAAEnB;AAAP,GAAF,CATrB,EAUCqB,KAVD,CAUOH,KAAK,IAAI;AACfd,IAAAA,QAAQ,CAAC;AACTe,MAAAA,IAAI,EAAElB,UADG;AAETmB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAR;AAGA,GAdD;AAeA,CAhBM,C,CAkBP","sourcesContent":["import { \n\tAUTH_REGISTER,  \n\tAUTH_LOGIN,\n\tAUTH_ERROR } from '../constants'\n\n\nexport const register = (user) => (dispatch) => {\n\tconsole.log(user);\n\treturn fetch('http://localhost:3000/users/register', {\n\t\tmethod: 'POST',\n\t\tmode: 'cors',\n\t\tcredentials: 'include',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(user),\n\t})\n\t.then( (response) => {\n\t\tconsole.log(response.json());\n\t\tif (!response.json().error) {\n\t\t\tdispatch( {type: AUTH_REGISTER} ); \n\t\t}\n\t\telse {\n\t\t\tdispatch({  \n\t\t\t\ttype: AUTH_ERROR,\n\t\t\t\tpayload: 'Email or Username already in use'})\n\t\t}\n\t})\n\t.catch(error => {\n\t\tdispatch({  \n\t\ttype: AUTH_ERROR,\n\t\tpayload: 'Email or Username already in use'})\n\t})\n}\n\nexport const login = (formData) => (dispatch) => {\n\tfetch('http://localhost:3000/users/register', {\n\t\tmethod: 'GET',\n\t\tmode: 'cors',\n\t\tcredentials: 'include',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(formData),\n\t})\n\t.then( () => dispatch( {type: AUTH_LOGIN} ))\n\t.catch(error => {\n\t\tdispatch({  \n\t\ttype: AUTH_ERROR,\n\t\tpayload: 'Incorrect username or password'})\n\t})\n}\n\n// export const checkAuth = ()\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}